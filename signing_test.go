package matrixfederation

import (
	"bytes"
	"encoding/json"
	"golang.org/x/crypto/ed25519"
	"testing"
)

func TestSignJSON(t *testing.T) {
	random := bytes.NewBuffer([]byte("Some 32 randomly generated bytes"))
	entityName := "example.com"
	keyID := "ed25519:my_key_id"
	input := []byte(`{"this":"is","my":"message"}`)

	publicKey, privateKey, err := ed25519.GenerateKey(random)
	if err != nil {
		t.Fatal(err)
	}

	signed, err := SignJSON(entityName, keyID, privateKey, input)
	if err != nil {
		t.Fatal(err)
	}

	err = VerifyJSON(entityName, keyID, publicKey, signed)
	if err != nil {
		t.Errorf("VerifyJSON(%q)", signed)
		t.Fatal(err)
	}
}

type MyMessage struct {
	Unsigned   *json.RawMessage `json:"unsigned"`
	Content    *json.RawMessage `json:"content"`
	Signatures *json.RawMessage `json:"signature,omitempty"`
}

func TestSignJSONWithUnsigned(t *testing.T) {
	random := bytes.NewBuffer([]byte("Some 32 randomly generated bytes"))
	entityName := "example.com"
	keyID := "ed25519:my_key_id"
	content := json.RawMessage(`{"signed":"data"}`)
	unsigned := json.RawMessage(`{"unsigned":"data"}`)
	message := MyMessage{&unsigned, &content, nil}

	input, err := json.Marshal(&message)
	if err != nil {
		t.Fatal(err)
	}

	publicKey, privateKey, err := ed25519.GenerateKey(random)
	if err != nil {
		t.Fatal(err)
	}

	signed, err := SignJSON(entityName, keyID, privateKey, input)
	if err != nil {
		t.Fatal(err)
	}

	if err := json.Unmarshal(signed, &message); err != nil {
		t.Fatal(err)
	}
	newUnsigned := json.RawMessage(`{"different":"data"}`)
	message.Unsigned = &newUnsigned
	input, err = json.Marshal(&message)
	if err != nil {
		t.Fatal(err)
	}

	err = VerifyJSON(entityName, keyID, publicKey, signed)
	if err != nil {
		t.Errorf("VerifyJSON(%q)", signed)
		t.Fatal(err)
	}
}
